---
import type { Resource } from '../data/resources';

interface Props {
  resource: Resource;
}

const { resource } = Astro.props;

const getIcon = (type: string) => {
  switch (type) {
    case 'pdf':
      return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />`;
    case 'audio':
      return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />`;
    case 'video':
      return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />`;
    case 'link':
      return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />`;
    default:
      return `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />`;
  }
};

const getTypeLabel = (type: string) => {
  switch (type) {
    case 'pdf':
      return 'PDF Document';
    case 'audio':
      return 'Audio File';
    case 'video':
      return 'Video';
    case 'link':
      return 'External Link';
    default:
      return 'Resource';
  }
};
---

<article class="bg-white rounded-lg shadow-md hover:shadow-lg transition p-6 flex gap-4">
  <div class="flex-shrink-0">
    <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
      <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <Fragment set:html={getIcon(resource.type)} />
      </svg>
    </div>
  </div>

  <div class="flex-grow">
    <div class="mb-2">
      <h3 class="text-lg font-bold text-gray-900 mb-1">
        {resource.title}
      </h3>
      <p class="text-xs text-gray-500 uppercase">
        {getTypeLabel(resource.type)} â€¢ {resource.category}
      </p>
    </div>

    <p class="text-gray-700 text-sm mb-4">
      {resource.description}
    </p>

    <div class="flex items-center gap-3">
      {resource.fileUrl && (
        <a
          href={resource.fileUrl}
          class="inline-flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm font-medium transition"
          target={resource.type === 'link' ? '_blank' : undefined}
          rel={resource.type === 'link' ? 'noopener noreferrer' : undefined}
        >
          {resource.type === 'link' ? (
            <>
              <span>Visit</span>
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
              </svg>
            </>
          ) : (
            <>
              <span>Download</span>
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
              </svg>
            </>
          )}
        </a>
      )}
    </div>

    <div class="mt-3 flex flex-wrap gap-2">
      {resource.tags.map((tag) => (
        <span class="text-xs text-gray-600 bg-gray-100 px-2 py-1 rounded">
          #{tag}
        </span>
      ))}
    </div>
  </div>
</article>
