---
import type { Event } from '../data/events';

interface Props {
  events: Event[];
  title?: string;
}

const { events, title = 'Upcoming Events' } = Astro.props;

// Sort events by date
const sortedEvents = [...events].sort((a, b) =>
  new Date(a.startDateTime).getTime() - new Date(b.startDateTime).getTime()
);

// Get today's date
const today = new Date();
today.setHours(0, 0, 0, 0);

// Filter to only upcoming events
const upcomingEvents = sortedEvents.filter(event =>
  new Date(event.startDateTime) >= today
);

const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    weekday: 'short',
    month: 'short',
    day: 'numeric',
  });
};

const formatTime = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleTimeString('en-US', {
    hour: 'numeric',
    minute: '2-digit',
    hour12: true,
  });
};

const getDayOfWeek = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { weekday: 'short' });
};

const getMonthDay = (dateString: string) => {
  const date = new Date(dateString);
  return date.getDate();
};
---

<div class="bg-white rounded-lg shadow-md p-6">
  <h2 class="text-2xl font-bold text-gray-900 mb-6">{title}</h2>

  {upcomingEvents.length === 0 ? (
    <p class="text-gray-600 text-center py-8">No upcoming events at this time.</p>
  ) : (
    <div class="space-y-4">
      {upcomingEvents.map((event) => (
        <div class="flex gap-4 pb-4 border-b border-gray-200 last:border-b-0 last:pb-0">
          <div class="flex-shrink-0 text-center">
            <div class="w-16 h-16 bg-blue-100 rounded-lg flex flex-col items-center justify-center">
              <div class="text-xs text-blue-700 uppercase font-medium">
                {getDayOfWeek(event.startDateTime)}
              </div>
              <div class="text-2xl font-bold text-blue-900">
                {getMonthDay(event.startDateTime)}
              </div>
            </div>
          </div>

          <div class="flex-grow min-w-0">
            <h3 class="font-semibold text-gray-900 mb-1 truncate">
              <a href={`/events/${event.id}`} class="hover:text-blue-700 transition">
                {event.title}
              </a>
            </h3>

            <div class="flex items-center gap-2 text-sm text-gray-600 mb-1">
              <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span>{formatTime(event.startDateTime)}</span>
            </div>

            <div class="flex items-center gap-2 text-sm text-gray-600">
              <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              <span class="truncate">{event.location}</span>
            </div>
          </div>
        </div>
      ))}
    </div>
  )}

  <div class="mt-6 text-center">
    <a
      href="/events"
      class="inline-flex items-center gap-2 text-blue-600 hover:text-blue-800 font-medium"
    >
      View All Events
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </a>
  </div>
</div>
